# Import necessary libraries
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

# Load the MNIST dataset
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

# Preprocessing the data: Reshape and normalize the images
train_images = train_images.reshape((60000, 28 * 28)).astype('float32') / 255
test_images = test_images.reshape((10000, 28 * 28)).astype('float32') / 255

# One-hot encode the labels
train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

# Build the neural network model with Tanh activation
model = models.Sequential()

# Input layer: 784 input neurons (28x28 pixels flattened)
model.add(layers.Dense(512, input_shape=(28 * 28,)))
model.add(layers.Activation('tanh'))  # Hidden layer with Tanh activation

# Second hidden layer
model.add(layers.Dense(256))
model.add(layers.Activation('tanh'))  # Another layer with Tanh activation

# Output layer: 10 output neurons for 10 digit classes
model.add(layers.Dense(10))
model.add(layers.Activation('softmax'))  # Softmax activation for classification

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(train_images, train_labels, epochs=10, batch_size=128, validation_split=0.2)

# Evaluate the model on the test data
test_loss, test_acc = model.evaluate(test_images, test_labels)
print(f'Test accuracy: {test_acc}')
