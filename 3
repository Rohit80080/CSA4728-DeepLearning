import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import cross_val_score
from sklearn.pipeline import make_pipeline


np.random.seed(0)


n_samples = 30
X = np.sort(np.random.rand(n_samples))
y = np.cos(1.5 * np.pi * X) + np.random.randn(n_samples) * 0.1

degrees = [1, 4, 15]

plt.figure(figsize=(14, 5))


for i, degree in enumerate(degrees):
    plt.subplot(1, 3, i + 1)
    
    model = make_pipeline(PolynomialFeatures(degree), LinearRegression())
    model.fit(X[:, np.newaxis], y)
    
    
    scores = cross_val_score(model, X[:, np.newaxis], y, scoring="neg_mean_squared_error", cv=10)
    
    
    X_test = np.linspace(0, 1, 100)
    
    
    plt.plot(X_test, model.predict(X_test[:, np.newaxis]), label="Model")
    
    plt.plot(X_test, np.cos(1.5 * np.pi * X_test), label="True function")

    plt.scatter(X, y, edgecolor="b", s=20, label="Samples")
    
    
    plt.xlabel("x")
    plt.ylabel("y")
    plt.xlim((0, 1))
    plt.ylim((-2, 2))
    plt.title(f"Degree {degree}\nMSE = {-scores.mean():.2e} (+/- {scores.std():.2e})")
    plt.legend(loc="best")


plt.show()
